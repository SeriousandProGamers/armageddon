buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${mod_version}"
group = "${mod_package}.${mod_id}"
archivesBaseName = "${mod_name}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	mappings channel: 'snapshot', version: "${mappings_version}"
	// makeObfSourceJar = false
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run/client')

			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// property 'forge.logging.console.level', 'debug'
			property 'mixin.env.disableRefMap', 'true'

			args '-mixin.config=' + mod_id + '.mixins.json'

			mods {
				Armageddon {
					source sourceSets.main
				}
			}
		}

		clientAuthed {
			parent runs.client

			args '-mixin.config=' + mod_id + '.mixins.json'

			if(project.hasProperty('mc_uuid')) {
				args '--uuid', project.getProperty('mc_uuid');
			}

			if(project.hasProperty('mc_username')) {
				args '--username', project.getProperty('mc_username');
			}

			if(project.hasProperty('mc_accessToken')) {
				args '--accessToken', project.getProperty('mc_accessToken');
			}
		}

		server {
			workingDirectory project.file('run/server')

			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// property 'forge.logging.console.level', 'debug'
			property 'mixin.env.disableRefMap', 'true'

			args 'nogui', '-mixin.config=' + mod_id + '.mixins.json'

			mods {
				Armageddon {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run/data')

			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// property 'forge.logging.console.level', 'debug'
			property 'mixin.env.disableRefMap', 'true'

			args '-mixin.config=' + mod_id + '.mixins.json', '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				Armageddon {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

repositories {
	mavenLocal() // Local Deps
	maven { url 'https://dvs1.progwml6.com/files/maven' } // JEI
	maven { url 'https://maven.tterrag.com/' } // TOP
}

dependencies {
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	// JEI
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

	// TOP
	compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${mc_version_short}:${mc_version_short}-${top_version}:api")
	runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${mc_version_short}:${mc_version_short}-${top_version}")

	if(project.hasProperty('apex_local_deps') && project.getProperty('apex_local_deps')) {
		// Local Deps
		runtimeOnly fg.deobf("${apex_package}:devworld:${mc_version}-${devworld_version}")
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
	classifier = 'deobf'
	from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
	archives deobfJar
}

jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir

	manifest {
		attributes([
				'Specification-Title': "${mod_name}",
				'Specification-Vendor': "${mod_author}",
				'Specification-Version': '1',
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${mod_version}",
				'Implementation-Vendor' : "${mod_name}",
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs': "${mod_id}.mixins.json"
		])
	}
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "${mod_package}"
			artifactId = "${mod_id}"
			version = "${mc_version}-${mod_version}"

			artifact jar
			artifact javadocJar
			artifact sourcesJar
			artifact deobfJar
		}
	}
	repositories {
		mavenLocal()
	}
}